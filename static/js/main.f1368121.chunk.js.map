{"version":3,"sources":["Containers/404/NotFound.js","Components/Navbar/Navbar.js","Config/firebase.js","Components/Poll/Poll.js","Components/Loader/Loader.js","Containers/Home/Home.js","Containers/Signup/Signup.js","Containers/Login/Login.js","Containers/Admin/Admin.js","Containers/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["NotFound","React","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","props","classes","className","AppBar","position","style","boxShadow","Toolbar","Typography","variant","Button","color","onClick","signOut","ExitToApp","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","pollStyles1","questionSeparator","questionSeparatorWidth","questionBold","questionColor","align","PollComponent","handleVote","voteAnswer","data","i","console","log","pollAnswers","state","newPollAnswers","map","answer","option","votes","database","ref","update","then","setState","this","Paper","customStyles","question","pollQuestion","answers","onVote","e","index","override","css","Loader","size","loading","Home","signOutHandler","auth","catch","error","polls","loader","onAuthStateChanged","user","history","push","on","snap","val","uid","key","Container","maxWidth","v","Signup","handelChange","target","name","value","handelSubmit","a","fullName","email","password","createUserWithEmailAndPassword","errorMessage","message","elevation","TextField","autoComplete","required","fullWidth","id","label","autoFocus","onChange","type","textAlign","to","width","height","Login","submitHandle","signInWithEmailAndPassword","Swal","fire","icon","text","once","localStorage","setItem","JSON","stringify","Dashboard","handelAdd","Option1","Option2","Option3","Option4","removeItem","delete","splice","remove","isAdmin","getItem","parse","Grid","container","item","xs","lg","padding","margin","fontSize","fontWeight","float","App","exact","path","component","Admin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1368121.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass NotFound extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1> NotFound </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ExitToApp} from '@material-ui/icons'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{boxShadow: 'none'}}>\r\n        <Toolbar>\r\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography variant='h5' className={classes.title}>\r\n                Voting Poll\r\n          </Typography>\r\n          <Button  color=\"inherit\" onClick={props.signOut}>Logout <ExitToApp /></Button> \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import firebase from 'firebase/app'\r\nimport \"firebase/auth\"\r\nimport \"firebase/database\"\r\nimport \"firebase/storage\"\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDxZtgcOIr7H-ZOmuHUja1nemcJkaSjpSc\",\r\n    authDomain: \"react-live-poll-4d98f.firebaseapp.com\",\r\n    databaseURL: \"https://react-live-poll-4d98f.firebaseio.com\",\r\n    projectId: \"react-live-poll-4d98f\",\r\n    storageBucket: \"react-live-poll-4d98f.appspot.com\",\r\n    messagingSenderId: \"299010166362\",\r\n    appId: \"1:299010166362:web:ac7e326b71b9fd91009263\"\r\n\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nexport {\r\n    firebaseApp\r\n};","import React from \"react\";\r\nimport Poll from \"react-polls\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport \"./Poll.css\";\r\n\r\nimport { firebaseApp } from \"./../../Config/firebase\";\r\n\r\nconst pollStyles1 = {\r\n  questionSeparator: true,\r\n  questionSeparatorWidth: \"poll\",\r\n  questionBold: true,\r\n  questionColor: \"#3F51B5\",\r\n  align: \"left\",\r\n  theme: \"blue\",\r\n};\r\n\r\nclass PollComponent extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pollAnswers: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let pollAnswers = this.props.data.pollAnswers;\r\n    this.setState({\r\n      pollAnswers: [...pollAnswers],\r\n    });\r\n  }\r\n  handleVote = (voteAnswer, data, i) => {\r\n    console.log(voteAnswer, data, i);\r\n    const { pollAnswers } = this.state;\r\n    const newPollAnswers = pollAnswers.map((answer) => {\r\n      if (answer.option === voteAnswer) {\r\n        answer.votes++;\r\n        firebaseApp\r\n          .database()\r\n          .ref(`poll/${i}`)\r\n          .update({ pollAnswers })\r\n          .then(() => {\r\n           // alert(\"data updated\");\r\n          });\r\n        return answer;\r\n      }\r\n    });\r\n    this.setState({\r\n      pollAnswers: newPollAnswers,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Paper className=\"poll-card\">\r\n          <Poll\r\n            customStyles={pollStyles1}\r\n            question={this.props.data.pollQuestion}\r\n            answers={this.props.data.pollAnswers}\r\n            onVote={(e) =>\r\n              this.handleVote(e, this.props.data, this.props.index)\r\n            }\r\n          />\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PollComponent;\r\n","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/BounceLoader\";\r\n \r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n \r\nclass Loader extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sweet-loading\">\r\n        <ClipLoader\r\n          css={override}\r\n          size={100}\r\n          color={\"#123abc\"}\r\n          loading={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Loader","import React from \"react\";\r\nimport \"./Home.css\";\r\nimport Navbar from \"./../../Components/Navbar/Navbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Poll from \"./../../Components/Poll/Poll\";\r\nimport { Loader } from \"./../../Components\"\r\n import { firebaseApp } from \"./../../Config/firebase\";\r\nclass Home extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      polls: [],\r\n      loader: false\r\n    };\r\n  }\r\n\r\n  // com\r\n  componentDidMount() {\r\n    firebaseApp.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.props.history.push(\"/home\");\r\n      } else {\r\n        this.props.history.push(\"/\");\r\n      }\r\n    });\r\n\r\n    let { polls, loader } = this.state;\r\n    this.setState({\r\n      loader: true\r\n    })\r\n    firebaseApp\r\n      .database()\r\n      .ref(\"poll\")\r\n      .on(\"child_added\", (snap) => {\r\n        let data = snap.val();\r\n        data.uid = snap.key;\r\n        polls.push(data);\r\n        this.setState({\r\n          polls,\r\n          loader: false\r\n        });\r\n      })   \r\n  }\r\n\r\n  signOutHandler = () => {\r\n    firebaseApp\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {})\r\n      .catch(error => {});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <Navbar signOut={this.signOutHandler} />\r\n        <div className=\"poll_container\">\r\n          {\r\n            this.state.loader ?\r\n            <div>\r\n              <br />\r\n              <br />\r\n            <Loader />\r\n             </div> \r\n            :\r\n          <Container maxWidth=\"sm\">\r\n            <br />\r\n            <br />\r\n            {this.state.polls &&\r\n              this.state.polls.map((v, i) => {\r\n                return <Poll key={i} index={v.uid} data={v} />;\r\n              })}\r\n          </Container>\r\n            }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Signup.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {firebaseApp} from \"./../../Config/firebase\"\r\n\r\nclass Signup extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      fullName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }; \r\n  }\r\n\r\n  componentDidMount(){\r\n    firebaseApp.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.props.history.push(\"/home\");\r\n      } else {\r\n        this.props.history.push(\"/register\");\r\n      }\r\n    });\r\n  }\r\n\r\n  handelChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handelSubmit = async () => {\r\n    let { fullName, email, password } = this.state;\r\n       await firebaseApp\r\n        .auth()\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(() => {\r\n          firebaseApp.database().ref(\"users\").push({\r\n            fullName,\r\n            email,\r\n            password\r\n          }).then(()=>{\r\n           // alert(\"data added\");\r\n            this.props.history.push(\"/home\");\r\n          })\r\n        })\r\n        .catch(function(error) {\r\n          // var errorCode = error.code;\r\n          var errorMessage = error.message;\r\n          console.log(errorMessage);\r\n        });\r\n    }\r\n\r\n\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (\r\n      <div className=\"signup\">\r\n        <div className=\"spacer\" />\r\n        <Container maxWidth=\"sm\">\r\n          <Paper elevation={3} className=\"paper\">\r\n            <div className=\"form-title\">\r\n              <span>SIGN UP</span>\r\n            </div>\r\n            <br />\r\n            <TextField\r\n              autoComplete=\"fname\"\r\n              name=\"fullName\"\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"fullName\"\r\n              label=\"Full Name\"\r\n              autoFocus\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <div style={{ textAlign: \"right\" }}>\r\n              <span>\r\n                Already have Account? <Link to=\"/\">Login</Link>\r\n              </span>\r\n            </div>\r\n            <br />\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ width: \"40%\", height: \"40px\" }}\r\n              onClick={this.handelSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Login.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { firebaseApp } from \"./../../Config/firebase\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebaseApp.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.props.history.push(\"/home\");\r\n      } else {\r\n        this.props.history.push(\"/\");\r\n      }\r\n    });\r\n  }\r\n\r\n  handelChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  submitHandle = async () => {\r\n    let { email, password } = this.state;\r\n    await firebaseApp\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((user) => {\r\n        Swal.fire(\"Login Successful!\", \"success\");\r\n        this.props.history.push(\"/home\");\r\n      })\r\n      .catch((error) => {\r\n        // var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n          Swal.fire({\r\n            icon: 'error',\r\n            text: error.message,\r\n          })\r\n        console.log(errorMessage);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"spacer\" />\r\n        <Container maxWidth=\"sm\">\r\n          <Paper elevation={3} className=\"paper\">\r\n            <div className=\"form-title\">\r\n              <span>LOG IN</span>\r\n            </div>\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <div style={{ textAlign: \"right\" }}>\r\n              <span>\r\n                Don't have Account? <Link to=\"/register\">Signup</Link>\r\n              </span>\r\n            </div>\r\n            <br />\r\n\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ width: \"40%\", height: \"40px\" }}\r\n              onClick={this.submitHandle}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./Admin.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {firebaseApp} from \"../../Config/firebase\"\r\nimport Swal from \"sweetalert2\";\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    firebaseApp.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.props.history.push(\"/dashboard\");\r\n      } else {\r\n        this.props.history.push(\"/admin\");\r\n      }\r\n    });\r\n  }\r\n\r\n  handelChange = (e)=>{\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  submitHandle = async () =>{\r\n    let {email,password } = this.state\r\n    firebaseApp.database().ref(\"admin\").once(\"value\", (snap)=>{\r\n      let data = snap.val();\r\n      if(data && data.email === email && data.password === password ){\r\n        Swal.fire(\"Login Successful!\", \"success\");\r\n        localStorage.setItem(\"admin\", JSON.stringify(data));\r\n        this.props.history.push(\"/dashboard\");\r\n      }\r\n      else{\r\n        Swal.fire({\r\n          icon: 'error',\r\n          text: \"Opps.. Login Unsuccessful!\",\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() { \r\n    console.log(this.state)\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"spacer\" />\r\n        <Container maxWidth=\"sm\">\r\n          <Paper elevation={3} className=\"paper\">\r\n            <div className=\"form-title\">\r\n              <span>Welcome Admin</span><br />\r\n              <span>LOG IN</span>\r\n            </div>\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              onChange={this.handelChange}\r\n            />\r\n            <br />\r\n            <br />\r\n         \r\n            <br />\r\n\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ width: \"40%\", height: \"40px\" }}\r\n              onClick={this.submitHandle}\r\n              >\r\n                Log In \r\n            </Button>            \r\n          </Paper>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"../../Components/Navbar/Navbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { firebaseApp } from \"../../Config/firebase\";\r\nimport Swal from \"sweetalert2\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nclass Dashboard extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pollQuestion: \"\",\r\n      pollAnswers: [],\r\n      polls: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let isAdmin = localStorage.getItem(\"admin\");\r\n    isAdmin = JSON.parse(isAdmin);\r\n    console.log(isAdmin);\r\n    if (!isAdmin) {\r\n      this.props.history.push(\"/admin\");\r\n    }\r\n\r\n    let { polls } = this.state;\r\n    firebaseApp\r\n      .database()\r\n      .ref(\"poll\")\r\n      .on(\"child_added\", (snap) => {\r\n        let data = snap.val();\r\n        data.uid = snap.key;\r\n        polls.push(data);\r\n        this.setState({\r\n          polls,\r\n        });\r\n      });\r\n  }\r\n\r\n  handelChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: {\r\n        votes: 0,\r\n        option: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  // handelAdd\r\n\r\n  handelAdd = () => {\r\n    let {\r\n      pollQuestion,\r\n      pollAnswers,\r\n      Option1,\r\n      Option2,\r\n      Option3,\r\n      Option4,\r\n    } = this.state;\r\n    pollAnswers.push(Option1, Option2, Option3, Option4);\r\n\r\n    firebaseApp\r\n      .database()\r\n      .ref(`poll`)\r\n      .push({ pollQuestion, pollAnswers })\r\n      .then(() => {\r\n        Swal.fire(\"Data Added Successfuly!\", \"success\");\r\n        this.setState({\r\n          pollAnswers: [],\r\n          pollQuestion: \"\",\r\n          Option1: \"\",\r\n          Option2: \"\",\r\n          Option3: \"\",\r\n          Option4: \"\",\r\n        });\r\n      });\r\n  };\r\n\r\n  signOutHandler = () => {\r\n    localStorage.removeItem(\"admin\");\r\n    this.props.history.push(\"/admin\");\r\n  };\r\n\r\n  delete = (key, i) => {\r\n    let { polls } = this.state;\r\n    polls.splice(i,1);\r\n    \r\n    firebaseApp\r\n      .database()\r\n      .ref(`poll/${i}`)\r\n      .remove()\r\n      .then(() => {\r\n        // alert(\"Data Deleted\");\r\n        this.setState({\r\n          polls\r\n        })\r\n      });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      pollQuestion,\r\n      pollAnswers,\r\n      Option1,\r\n      Option2,\r\n      Option3,\r\n      Option4,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Navbar signOut={this.signOutHandler} />\r\n        <div className=\"spacer\" style={{ height: \"40px\" }} />\r\n\r\n        <Container>\r\n          <Grid container>\r\n            <Grid item xs={12} lg={5}>\r\n              <Paper className=\"paper\">\r\n                <div className=\"form-title\">\r\n                  <span>Create New Poll</span>\r\n                </div>\r\n                <br />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  value={pollQuestion}\r\n                  id=\"question\"\r\n                  label=\"Enter Question\"\r\n                  name=\"pollQuestion\"\r\n                  autoComplete=\"question\"\r\n                  onChange={(e) =>\r\n                    this.setState({\r\n                      pollQuestion: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <br />\r\n                <br />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"Option1\"\r\n                  value={Option1 && Option1.option}\r\n                  label=\"Option 1\"\r\n                  onChange={this.handelChange}\r\n                  type=\"text\"\r\n                  id=\"Option-1\"\r\n                  autoComplete=\"current-password\"\r\n                />\r\n                <br />\r\n                <br />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  value={Option2 && Option2.option}\r\n                  fullWidth\r\n                  name=\"Option2\"\r\n                  label=\"Option 2\"\r\n                  type=\"text\"\r\n                  id=\"Option-2\"\r\n                  onChange={this.handelChange}\r\n                  autoComplete=\"current-password\"\r\n                />\r\n                <br />\r\n                <br />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"Option3\"\r\n                  value={Option3 && Option3.option}\r\n                  label=\"Option 3\"\r\n                  type=\"text\"\r\n                  id=\"Option-3\"\r\n                  onChange={this.handelChange}\r\n                  autoComplete=\"current-password\"\r\n                />\r\n                <br />\r\n                <br />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"Option4\"\r\n                  label=\"Option 4\"\r\n                  value={Option4 && Option4.option}\r\n                  type=\"text\"\r\n                  id=\"Option-4\"\r\n                  onChange={this.handelChange}\r\n                  autoComplete=\"current-password\"\r\n                />\r\n                <br />\r\n                <br />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ width: \"40%\", height: \"40px\" }}\r\n                  onClick={this.handelAdd}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} lg={7} style={{ padding: \"0 2%\" }}>\r\n              {this.state.polls &&\r\n                this.state.polls.map((v, i) => {\r\n                  return (\r\n                    <Paper\r\n                      elevation={1}\r\n                      style={{ padding: \"10px\", margin: \"5px 0\" }}\r\n                    >\r\n                      <span style={{ fontSize: \"22px\", fontWeight: \"bold\", color: \"#3F51B5\" }}>\r\n                        {v.pollQuestion}\r\n                      </span>\r\n\r\n\r\n                      <Button\r\n                        onClick={() => this.delete(i, v.uid)}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ float: \"right\" }}\r\n                      >\r\n                        DELETE\r\n                      </Button>\r\n\r\n                      <ul>\r\n                      {\r\n                        v.pollAnswers.map((v,i)=>{\r\n                          return <li>{v.option}</li>\r\n                        })\r\n                      }\r\n                      </ul>\r\n                    </Paper>\r\n                  );\r\n                })}\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Home, NotFound, Signup, Login, Admin, Dashboard } from \"./Containers\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <section className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Login} />\r\n          <Route path=\"/register\" component={Signup} />\r\n          <Route path=\"/admin\" component={Admin} />\r\n          <Route path=\"/dashboard\" component={Dashboard} />\r\n          <Route path=\"/home\" component={Home} />\r\n          <Route path=\"*\" component={NotFound} />\r\n        </Switch>\r\n      </Router>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}